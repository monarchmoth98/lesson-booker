/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/v1/calendar/": {
    /** Fetches the schedule for the current week */
    get: {
      parameters: {
        query?: {
          /** @description The date that the week being fetched starts on. If no date is given fetch the current week */
          startDate?: string;
        };
      };
      responses: {
        /** @description Successfully Fetched data */
        200: {
          content: {
            "application/json": components["schemas"]["SuccessResponseV1"] & {
              data?: components["schemas"]["GetCalendarResponseV1"];
            };
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["BadRequestErrorV1"];
          };
        };
        /** @description Unauthorised To access this data */
        401: {
          content: {
            "application/json": components["schemas"]["UnauthorizedErrorV1"];
          };
        };
        /** @description Not Found Error */
        404: {
          content: {
            "application/json": components["schemas"]["NotFoundErrorV1"];
          };
        };
      };
    };
  };
  "/v1/calendar/lesson": {
    /** Creates a booking in the schedule */
    post: {
      requestBody: components["requestBodies"]["CreateLessonRequestV1"];
      responses: {
        /** @description Successful created lesson Request */
        201: {
          content: {
            "application/json": components["schemas"]["SuccessResponseV1"] & {
              data?: components["schemas"]["CreateLessonResponseV1"];
            };
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["BadRequestErrorV1"];
          };
        };
        /** @description Unauthorised To access this data */
        401: {
          content: {
            "application/json": components["schemas"]["UnauthorizedErrorV1"];
          };
        };
        /** @description Calendar not found, can\'t add lesson to non-existent calendar */
        404: {
          content: {
            "application/json": components["schemas"]["NotFoundErrorV1"];
          };
        };
      };
    };
  };
  "/v1/calendar/lesson/{lesson-id}": {
    /** Get information about a lesson */
    get: {
      parameters: {
        path: {
          /** @description ID of the lesson to retrieve */
          "lesson-id": string;
        };
      };
      responses: {
        /** @description Successfully Fetched Lesson */
        200: {
          content: {
            "application/json": components["schemas"]["SuccessResponseV1"] & {
              data?: components["schemas"]["GetCalendarResponseV1"];
            };
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["BadRequestErrorV1"];
          };
        };
        /** @description Unauthorised To access this data */
        401: {
          content: {
            "application/json": components["schemas"]["UnauthorizedErrorV1"];
          };
        };
        /** @description Not Found Error */
        404: {
          content: {
            "application/json": components["schemas"]["NotFoundErrorV1"];
          };
        };
      };
    };
    /** Edit information about a lesson */
    put: {
      parameters: {
        path: {
          /** @description ID of the lesson to update */
          "lesson-id": string;
        };
      };
      requestBody: components["requestBodies"]["UpdateLessonRequestV1"];
      responses: {
        /** @description Successfully Updated Lesson */
        200: {
          content: {
            "application/json": components["schemas"]["SuccessResponseV1"] & {
              data?: components["schemas"]["LessonV1"];
            };
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["BadRequestErrorV1"];
          };
        };
        /** @description Unauthorised To access this data */
        401: {
          content: {
            "application/json": components["schemas"]["UnauthorizedErrorV1"];
          };
        };
        /** @description Not Found Error */
        404: {
          content: {
            "application/json": components["schemas"]["NotFoundErrorV1"];
          };
        };
      };
    };
    /** Delete a lesson */
    delete: {
      parameters: {
        path: {
          /** @description ID of the lesson to delete */
          "lesson-id": string;
        };
      };
      responses: {
        /** @description Successfully Deleted Lesson */
        204: {
          content: never;
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["BadRequestErrorV1"];
          };
        };
        /** @description Unauthorised To access this data */
        401: {
          content: {
            "application/json": components["schemas"]["UnauthorizedErrorV1"];
          };
        };
        /** @description Not Found Error */
        404: {
          content: {
            "application/json": components["schemas"]["NotFoundErrorV1"];
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /**
     * @example {
     *   "message": "Resource found successfully"
     * }
     */
    SuccessResponseV1: {
      message?: string;
    };
    /**
     * @example {
     *   "error": "Bad Request",
     *   "message": "Invalid input parameters"
     * }
     */
    BadRequestErrorV1: {
      error?: string;
      message?: string;
    };
    /**
     * @example {
     *   "error": "Unauthorized",
     *   "message": "You are not authorized to access this resource"
     * }
     */
    UnauthorizedErrorV1: {
      error?: string;
      message?: string;
    };
    /**
     * @example {
     *   "error": "Not Found",
     *   "message": "The requested resource was not found"
     * }
     */
    NotFoundErrorV1: {
      error?: string;
      message?: string;
    };
    GetCalendarResponseV1: {
      weekSchedule?: components["schemas"]["WeekScheduleV1"];
    };
    CreateLessonResponseV1: {
      createdLesson?: components["schemas"]["LessonV1"];
    };
    WeekScheduleV1: {
      monday: components["schemas"]["DayScheduleV1"];
      tuesday: components["schemas"]["DayScheduleV1"];
      wednesday: components["schemas"]["DayScheduleV1"];
      thursday: components["schemas"]["DayScheduleV1"];
      friday: components["schemas"]["DayScheduleV1"];
      saturday: components["schemas"]["DayScheduleV1"];
      sunday: components["schemas"]["DayScheduleV1"];
    };
    DayScheduleV1: {
      /**
       * Format: date
       * @description The date
       */
      date: string;
      lessons: components["schemas"]["LessonV1"][];
    };
    LessonV1: {
      startTime: components["schemas"]["LessonStartTimeEnumV1"];
      /**
       * Format: date
       * @example 2024-08-22
       */
      date: string;
      student: Record<string, never>;
      /**
       * @description The duration of the lesson in minutes.
       * @default 50
       */
      lessonDuration?: number;
      /**
       * @description The time after a lesson for the teacher to take a break, in minutes.
       * @default 10
       */
      breakDuration?: number;
      /** @description true if the lesson has been accepted by the teacher, false if the lesson is still just a proposed lesson. */
      isAccepted: boolean;
    };
    LessonStartTimeEnumV1: ("09:00" | "09:30" | "10:00" | "10:30" | "11:00" | "11:30" | "12:00" | "12:30" | "13:00" | "13:30" | "14:00" | "14:30" | "15:00" | "15:30" | "16:00" | "16:30" | "17:00" | "17:30" | "18:00" | "18:30" | "19:00" | "19:30" | "20:00")[];
  };
  responses: never;
  parameters: never;
  requestBodies: {
    CreateLessonRequestV1: {
      content: {
        "application/json": {
          student: Record<string, never>;
          startTime: components["schemas"]["LessonStartTimeEnumV1"];
          /**
           * @description The amount to be payed for the lesson in cents.
           * @default 2300
           */
          rate?: number;
          /** @description The level of the students chinese. */
          chineseLevel?: string;
          /** @description The students goals. */
          chineseGoals?: string;
          /** @description The length of time the student has studied chinese for. */
          chineseTimeStudied?: string;
          /**
           * @description The Number of minutes that a lesson will last.
           * @default 50
           */
          lessonDuration?: number;
        };
      };
    };
    UpdateLessonRequestV1: {
      content: {
        "application/json": {
          startTime?: components["schemas"]["LessonStartTimeEnumV1"];
          /** @description The amount to be payed for the lesson in cents. */
          rate?: number;
          /** @description The Number of minutes that a lesson will last. */
          lessonDuration?: number;
        };
      };
    };
  };
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
